#!/bin/sh

# Fail fast.
set -e

status() {
  echo "\033[0;32m$@\033[0m"
}

error() {
  >&2 echo $@
}

retry() {
  local retry_max=$1
  shift

  local count=$retry_max
  while [ $count -gt 0 ]; do
    "$@" && break
    count=$(($count - 1))
    sleep 1
  done

  [ $count -eq 0 ] && {
    echo "Retry failed [$retry_max]: $@" >&2
    return 1
  }
  return 0
}

if [ -z "$REPOSITORY" ]; then
  error "REPOSITORY env var is required"
fi

if [ -z "$GITHUB_DOMAIN" ]; then
  error "GITHUB_DOMAIN env var is required"
fi

if [ -z "$BRANCH" ]; then
  error "BRANCH env var is required"
fi

if [ -z "$SHA" ]; then
  error "SHA env var is required"
fi

# Captain namespace. https://github.com/harbur/captain/blob/32fb0d765cae2c15fb2fa15b5b989fb527704715/captain/cmd.go#L115-L117
export USER=`echo "${REPOSITORY}" | cut -f 1 -d '/'`

teardown() {
  local pid_file="/var/run/docker.pid"
  status "Stopping Docker..."
  if [ -e "$pid_file" ]; then
    kill -15 $(cat "$pid_file")
  fi
}

setup() {
  # Copy ssh keys from the data volume.
  cp -r /var/run/conveyor/.ssh /root/.ssh
  chown -R root:root ~/.ssh
  chmod -R 0600 ~/.ssh
  ssh-keyscan -t rsa "$GITHUB_DOMAIN" > ~/.ssh/known_hosts

  # Copy .docker/config.json from the data volume. Fallback to old .dockercfg.
  if [ -d /var/run/conveyor/.docker ]; then
    cp -r /var/run/conveyor/.docker /root/.docker
  else
    cp -r /var/run/conveyor/.dockercfg /root/.dockercfg
  fi

  status "Starting Docker..."
  wrapdocker
  docker version
}

clone() {
  status "Cloning..."
  # Clone the given branch and checkout the sha.
  git clone --depth 50 --branch="$BRANCH" "git@${GITHUB_DOMAIN}:${REPOSITORY}.git" "$REPOSITORY"
  cd "$REPOSITORY"
  git checkout -qf "$SHA"
}

pull() {
  if [ "$CACHE" = "on" ]; then
    status "Pulling..."
    # Attempt to pull the last build image for this branch.
    docker pull "$REPOSITORY:$BRANCH" || docker pull "$REPOSITORY:master" || docker pull "$REPOSITORY:latest" || true
  else
    status "Cache disabled. Not pulling."
  fi
}

build() {
  status "Building..."
  docker build -t "$REPOSITORY" .
  docker tag "$REPOSITORY" "$REPOSITORY:$SHA"
  docker tag -f "$REPOSITORY" "$REPOSITORY:$BRANCH" # Force tag because we pulled the last build for this branch.
}

# Push tag pushes a tag for this repository. It will also retry up to 3 times because the docker registry sucks.
push_tag() {
  local tag="$1"
  status "Pushing ${tag}..."
  retry 3 docker push "$REPOSITORY:$tag"
}

push() {
  if [ -z "$DRY" ]; then
    push_tag "latest"
    push_tag "$SHA"
    push_tag "$BRANCH"
  else
    status "Dry run enabled. Not pushing."
  fi
}

run() {
  setup
  clone && pull && build && push
}

trap teardown 0

run
